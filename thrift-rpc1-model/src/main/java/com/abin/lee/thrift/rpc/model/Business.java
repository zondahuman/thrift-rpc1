/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.abin.lee.thrift.rpc.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-09-08")
public class Business implements org.apache.thrift.TBase<Business, Business._Fields>, java.io.Serializable, Cloneable, Comparable<Business> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Business");

  private static final org.apache.thrift.protocol.TField BUSINESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("businessId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField BUSINESS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("businessName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BUSINESS_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("businessAddress", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contractId", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BusinessStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BusinessTupleSchemeFactory());
  }

  public long businessId; // required
  public String businessName; // required
  public String businessAddress; // required
  public long accountId; // required
  public long contractId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BUSINESS_ID((short)1, "businessId"),
    BUSINESS_NAME((short)2, "businessName"),
    BUSINESS_ADDRESS((short)3, "businessAddress"),
    ACCOUNT_ID((short)4, "accountId"),
    CONTRACT_ID((short)5, "contractId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BUSINESS_ID
          return BUSINESS_ID;
        case 2: // BUSINESS_NAME
          return BUSINESS_NAME;
        case 3: // BUSINESS_ADDRESS
          return BUSINESS_ADDRESS;
        case 4: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 5: // CONTRACT_ID
          return CONTRACT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BUSINESSID_ISSET_ID = 0;
  private static final int __ACCOUNTID_ISSET_ID = 1;
  private static final int __CONTRACTID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BUSINESS_ID, new org.apache.thrift.meta_data.FieldMetaData("businessId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BUSINESS_NAME, new org.apache.thrift.meta_data.FieldMetaData("businessName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("businessAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("contractId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Business.class, metaDataMap);
  }

  public Business() {
  }

  public Business(
    long businessId,
    String businessName,
    String businessAddress,
    long accountId,
    long contractId)
  {
    this();
    this.businessId = businessId;
    setBusinessIdIsSet(true);
    this.businessName = businessName;
    this.businessAddress = businessAddress;
    this.accountId = accountId;
    setAccountIdIsSet(true);
    this.contractId = contractId;
    setContractIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Business(Business other) {
    __isset_bitfield = other.__isset_bitfield;
    this.businessId = other.businessId;
    if (other.isSetBusinessName()) {
      this.businessName = other.businessName;
    }
    if (other.isSetBusinessAddress()) {
      this.businessAddress = other.businessAddress;
    }
    this.accountId = other.accountId;
    this.contractId = other.contractId;
  }

  public Business deepCopy() {
    return new Business(this);
  }

  @Override
  public void clear() {
    setBusinessIdIsSet(false);
    this.businessId = 0;
    this.businessName = null;
    this.businessAddress = null;
    setAccountIdIsSet(false);
    this.accountId = 0;
    setContractIdIsSet(false);
    this.contractId = 0;
  }

  public long getBusinessId() {
    return this.businessId;
  }

  public Business setBusinessId(long businessId) {
    this.businessId = businessId;
    setBusinessIdIsSet(true);
    return this;
  }

  public void unsetBusinessId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSID_ISSET_ID);
  }

  /** Returns true if field businessId is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessId() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSID_ISSET_ID);
  }

  public void setBusinessIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSID_ISSET_ID, value);
  }

  public String getBusinessName() {
    return this.businessName;
  }

  public Business setBusinessName(String businessName) {
    this.businessName = businessName;
    return this;
  }

  public void unsetBusinessName() {
    this.businessName = null;
  }

  /** Returns true if field businessName is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessName() {
    return this.businessName != null;
  }

  public void setBusinessNameIsSet(boolean value) {
    if (!value) {
      this.businessName = null;
    }
  }

  public String getBusinessAddress() {
    return this.businessAddress;
  }

  public Business setBusinessAddress(String businessAddress) {
    this.businessAddress = businessAddress;
    return this;
  }

  public void unsetBusinessAddress() {
    this.businessAddress = null;
  }

  /** Returns true if field businessAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessAddress() {
    return this.businessAddress != null;
  }

  public void setBusinessAddressIsSet(boolean value) {
    if (!value) {
      this.businessAddress = null;
    }
  }

  public long getAccountId() {
    return this.accountId;
  }

  public Business setAccountId(long accountId) {
    this.accountId = accountId;
    setAccountIdIsSet(true);
    return this;
  }

  public void unsetAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
  }

  /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
  }

  public void setAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTID_ISSET_ID, value);
  }

  public long getContractId() {
    return this.contractId;
  }

  public Business setContractId(long contractId) {
    this.contractId = contractId;
    setContractIdIsSet(true);
    return this;
  }

  public void unsetContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTID_ISSET_ID);
  }

  /** Returns true if field contractId is set (has been assigned a value) and false otherwise */
  public boolean isSetContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTID_ISSET_ID);
  }

  public void setContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BUSINESS_ID:
      if (value == null) {
        unsetBusinessId();
      } else {
        setBusinessId((Long)value);
      }
      break;

    case BUSINESS_NAME:
      if (value == null) {
        unsetBusinessName();
      } else {
        setBusinessName((String)value);
      }
      break;

    case BUSINESS_ADDRESS:
      if (value == null) {
        unsetBusinessAddress();
      } else {
        setBusinessAddress((String)value);
      }
      break;

    case ACCOUNT_ID:
      if (value == null) {
        unsetAccountId();
      } else {
        setAccountId((Long)value);
      }
      break;

    case CONTRACT_ID:
      if (value == null) {
        unsetContractId();
      } else {
        setContractId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BUSINESS_ID:
      return getBusinessId();

    case BUSINESS_NAME:
      return getBusinessName();

    case BUSINESS_ADDRESS:
      return getBusinessAddress();

    case ACCOUNT_ID:
      return getAccountId();

    case CONTRACT_ID:
      return getContractId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BUSINESS_ID:
      return isSetBusinessId();
    case BUSINESS_NAME:
      return isSetBusinessName();
    case BUSINESS_ADDRESS:
      return isSetBusinessAddress();
    case ACCOUNT_ID:
      return isSetAccountId();
    case CONTRACT_ID:
      return isSetContractId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Business)
      return this.equals((Business)that);
    return false;
  }

  public boolean equals(Business that) {
    if (that == null)
      return false;

    boolean this_present_businessId = true;
    boolean that_present_businessId = true;
    if (this_present_businessId || that_present_businessId) {
      if (!(this_present_businessId && that_present_businessId))
        return false;
      if (this.businessId != that.businessId)
        return false;
    }

    boolean this_present_businessName = true && this.isSetBusinessName();
    boolean that_present_businessName = true && that.isSetBusinessName();
    if (this_present_businessName || that_present_businessName) {
      if (!(this_present_businessName && that_present_businessName))
        return false;
      if (!this.businessName.equals(that.businessName))
        return false;
    }

    boolean this_present_businessAddress = true && this.isSetBusinessAddress();
    boolean that_present_businessAddress = true && that.isSetBusinessAddress();
    if (this_present_businessAddress || that_present_businessAddress) {
      if (!(this_present_businessAddress && that_present_businessAddress))
        return false;
      if (!this.businessAddress.equals(that.businessAddress))
        return false;
    }

    boolean this_present_accountId = true;
    boolean that_present_accountId = true;
    if (this_present_accountId || that_present_accountId) {
      if (!(this_present_accountId && that_present_accountId))
        return false;
      if (this.accountId != that.accountId)
        return false;
    }

    boolean this_present_contractId = true;
    boolean that_present_contractId = true;
    if (this_present_contractId || that_present_contractId) {
      if (!(this_present_contractId && that_present_contractId))
        return false;
      if (this.contractId != that.contractId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_businessId = true;
    list.add(present_businessId);
    if (present_businessId)
      list.add(businessId);

    boolean present_businessName = true && (isSetBusinessName());
    list.add(present_businessName);
    if (present_businessName)
      list.add(businessName);

    boolean present_businessAddress = true && (isSetBusinessAddress());
    list.add(present_businessAddress);
    if (present_businessAddress)
      list.add(businessAddress);

    boolean present_accountId = true;
    list.add(present_accountId);
    if (present_accountId)
      list.add(accountId);

    boolean present_contractId = true;
    list.add(present_contractId);
    if (present_contractId)
      list.add(contractId);

    return list.hashCode();
  }

  @Override
  public int compareTo(Business other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBusinessId()).compareTo(other.isSetBusinessId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessId, other.businessId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessName()).compareTo(other.isSetBusinessName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessName, other.businessName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessAddress()).compareTo(other.isSetBusinessAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessAddress, other.businessAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountId()).compareTo(other.isSetAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, other.accountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractId()).compareTo(other.isSetContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractId, other.contractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Business(");
    boolean first = true;

    sb.append("businessId:");
    sb.append(this.businessId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessName:");
    if (this.businessName == null) {
      sb.append("null");
    } else {
      sb.append(this.businessName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessAddress:");
    if (this.businessAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.businessAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountId:");
    sb.append(this.accountId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractId:");
    sb.append(this.contractId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BusinessStandardSchemeFactory implements SchemeFactory {
    public BusinessStandardScheme getScheme() {
      return new BusinessStandardScheme();
    }
  }

  private static class BusinessStandardScheme extends StandardScheme<Business> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Business struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BUSINESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.businessId = iprot.readI64();
              struct.setBusinessIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BUSINESS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessName = iprot.readString();
              struct.setBusinessNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BUSINESS_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessAddress = iprot.readString();
              struct.setBusinessAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.accountId = iprot.readI64();
              struct.setAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.contractId = iprot.readI64();
              struct.setContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Business struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BUSINESS_ID_FIELD_DESC);
      oprot.writeI64(struct.businessId);
      oprot.writeFieldEnd();
      if (struct.businessName != null) {
        oprot.writeFieldBegin(BUSINESS_NAME_FIELD_DESC);
        oprot.writeString(struct.businessName);
        oprot.writeFieldEnd();
      }
      if (struct.businessAddress != null) {
        oprot.writeFieldBegin(BUSINESS_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.businessAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
      oprot.writeI64(struct.accountId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONTRACT_ID_FIELD_DESC);
      oprot.writeI64(struct.contractId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BusinessTupleSchemeFactory implements SchemeFactory {
    public BusinessTupleScheme getScheme() {
      return new BusinessTupleScheme();
    }
  }

  private static class BusinessTupleScheme extends TupleScheme<Business> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Business struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBusinessId()) {
        optionals.set(0);
      }
      if (struct.isSetBusinessName()) {
        optionals.set(1);
      }
      if (struct.isSetBusinessAddress()) {
        optionals.set(2);
      }
      if (struct.isSetAccountId()) {
        optionals.set(3);
      }
      if (struct.isSetContractId()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetBusinessId()) {
        oprot.writeI64(struct.businessId);
      }
      if (struct.isSetBusinessName()) {
        oprot.writeString(struct.businessName);
      }
      if (struct.isSetBusinessAddress()) {
        oprot.writeString(struct.businessAddress);
      }
      if (struct.isSetAccountId()) {
        oprot.writeI64(struct.accountId);
      }
      if (struct.isSetContractId()) {
        oprot.writeI64(struct.contractId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Business struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.businessId = iprot.readI64();
        struct.setBusinessIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.businessName = iprot.readString();
        struct.setBusinessNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.businessAddress = iprot.readString();
        struct.setBusinessAddressIsSet(true);
      }
      if (incoming.get(3)) {
        struct.accountId = iprot.readI64();
        struct.setAccountIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.contractId = iprot.readI64();
        struct.setContractIdIsSet(true);
      }
    }
  }

}


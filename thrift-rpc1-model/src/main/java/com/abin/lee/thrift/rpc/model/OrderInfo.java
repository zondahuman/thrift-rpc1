/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.abin.lee.thrift.rpc.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-09-09")
public class OrderInfo implements org.apache.thrift.TBase<OrderInfo, OrderInfo._Fields>, java.io.Serializable, Cloneable, Comparable<OrderInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderInfo");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orderName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ORDER_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ORDER_INVENTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("orderInventory", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderInfoTupleSchemeFactory());
  }

  public long orderId; // required
  public String orderName; // required
  public double orderPrice; // required
  public String source; // required
  public long orderInventory; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_ID((short)1, "orderId"),
    ORDER_NAME((short)2, "orderName"),
    ORDER_PRICE((short)3, "orderPrice"),
    SOURCE((short)4, "source"),
    ORDER_INVENTORY((short)5, "orderInventory");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // ORDER_NAME
          return ORDER_NAME;
        case 3: // ORDER_PRICE
          return ORDER_PRICE;
        case 4: // SOURCE
          return SOURCE;
        case 5: // ORDER_INVENTORY
          return ORDER_INVENTORY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDERID_ISSET_ID = 0;
  private static final int __ORDERPRICE_ISSET_ID = 1;
  private static final int __ORDERINVENTORY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDER_NAME, new org.apache.thrift.meta_data.FieldMetaData("orderName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_PRICE, new org.apache.thrift.meta_data.FieldMetaData("orderPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_INVENTORY, new org.apache.thrift.meta_data.FieldMetaData("orderInventory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderInfo.class, metaDataMap);
  }

  public OrderInfo() {
  }

  public OrderInfo(
    long orderId,
    String orderName,
    double orderPrice,
    String source,
    long orderInventory)
  {
    this();
    this.orderId = orderId;
    setOrderIdIsSet(true);
    this.orderName = orderName;
    this.orderPrice = orderPrice;
    setOrderPriceIsSet(true);
    this.source = source;
    this.orderInventory = orderInventory;
    setOrderInventoryIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderInfo(OrderInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.orderId = other.orderId;
    if (other.isSetOrderName()) {
      this.orderName = other.orderName;
    }
    this.orderPrice = other.orderPrice;
    if (other.isSetSource()) {
      this.source = other.source;
    }
    this.orderInventory = other.orderInventory;
  }

  public OrderInfo deepCopy() {
    return new OrderInfo(this);
  }

  @Override
  public void clear() {
    setOrderIdIsSet(false);
    this.orderId = 0;
    this.orderName = null;
    setOrderPriceIsSet(false);
    this.orderPrice = 0.0;
    this.source = null;
    setOrderInventoryIsSet(false);
    this.orderInventory = 0;
  }

  public long getOrderId() {
    return this.orderId;
  }

  public OrderInfo setOrderId(long orderId) {
    this.orderId = orderId;
    setOrderIdIsSet(true);
    return this;
  }

  public void unsetOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  public void setOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
  }

  public String getOrderName() {
    return this.orderName;
  }

  public OrderInfo setOrderName(String orderName) {
    this.orderName = orderName;
    return this;
  }

  public void unsetOrderName() {
    this.orderName = null;
  }

  /** Returns true if field orderName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderName() {
    return this.orderName != null;
  }

  public void setOrderNameIsSet(boolean value) {
    if (!value) {
      this.orderName = null;
    }
  }

  public double getOrderPrice() {
    return this.orderPrice;
  }

  public OrderInfo setOrderPrice(double orderPrice) {
    this.orderPrice = orderPrice;
    setOrderPriceIsSet(true);
    return this;
  }

  public void unsetOrderPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERPRICE_ISSET_ID);
  }

  /** Returns true if field orderPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERPRICE_ISSET_ID);
  }

  public void setOrderPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERPRICE_ISSET_ID, value);
  }

  public String getSource() {
    return this.source;
  }

  public OrderInfo setSource(String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public long getOrderInventory() {
    return this.orderInventory;
  }

  public OrderInfo setOrderInventory(long orderInventory) {
    this.orderInventory = orderInventory;
    setOrderInventoryIsSet(true);
    return this;
  }

  public void unsetOrderInventory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERINVENTORY_ISSET_ID);
  }

  /** Returns true if field orderInventory is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderInventory() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERINVENTORY_ISSET_ID);
  }

  public void setOrderInventoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERINVENTORY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((Long)value);
      }
      break;

    case ORDER_NAME:
      if (value == null) {
        unsetOrderName();
      } else {
        setOrderName((String)value);
      }
      break;

    case ORDER_PRICE:
      if (value == null) {
        unsetOrderPrice();
      } else {
        setOrderPrice((Double)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;

    case ORDER_INVENTORY:
      if (value == null) {
        unsetOrderInventory();
      } else {
        setOrderInventory((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case ORDER_NAME:
      return getOrderName();

    case ORDER_PRICE:
      return getOrderPrice();

    case SOURCE:
      return getSource();

    case ORDER_INVENTORY:
      return getOrderInventory();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case ORDER_NAME:
      return isSetOrderName();
    case ORDER_PRICE:
      return isSetOrderPrice();
    case SOURCE:
      return isSetSource();
    case ORDER_INVENTORY:
      return isSetOrderInventory();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderInfo)
      return this.equals((OrderInfo)that);
    return false;
  }

  public boolean equals(OrderInfo that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true;
    boolean that_present_orderId = true;
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (this.orderId != that.orderId)
        return false;
    }

    boolean this_present_orderName = true && this.isSetOrderName();
    boolean that_present_orderName = true && that.isSetOrderName();
    if (this_present_orderName || that_present_orderName) {
      if (!(this_present_orderName && that_present_orderName))
        return false;
      if (!this.orderName.equals(that.orderName))
        return false;
    }

    boolean this_present_orderPrice = true;
    boolean that_present_orderPrice = true;
    if (this_present_orderPrice || that_present_orderPrice) {
      if (!(this_present_orderPrice && that_present_orderPrice))
        return false;
      if (this.orderPrice != that.orderPrice)
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_orderInventory = true;
    boolean that_present_orderInventory = true;
    if (this_present_orderInventory || that_present_orderInventory) {
      if (!(this_present_orderInventory && that_present_orderInventory))
        return false;
      if (this.orderInventory != that.orderInventory)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_orderId = true;
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_orderName = true && (isSetOrderName());
    list.add(present_orderName);
    if (present_orderName)
      list.add(orderName);

    boolean present_orderPrice = true;
    list.add(present_orderPrice);
    if (present_orderPrice)
      list.add(orderPrice);

    boolean present_source = true && (isSetSource());
    list.add(present_source);
    if (present_source)
      list.add(source);

    boolean present_orderInventory = true;
    list.add(present_orderInventory);
    if (present_orderInventory)
      list.add(orderInventory);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrderInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderName()).compareTo(other.isSetOrderName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderName, other.orderName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderPrice()).compareTo(other.isSetOrderPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderPrice, other.orderPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderInventory()).compareTo(other.isSetOrderInventory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderInventory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderInventory, other.orderInventory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderInfo(");
    boolean first = true;

    sb.append("orderId:");
    sb.append(this.orderId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderName:");
    if (this.orderName == null) {
      sb.append("null");
    } else {
      sb.append(this.orderName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderPrice:");
    sb.append(this.orderPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    if (this.source == null) {
      sb.append("null");
    } else {
      sb.append(this.source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderInventory:");
    sb.append(this.orderInventory);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderInfoStandardSchemeFactory implements SchemeFactory {
    public OrderInfoStandardScheme getScheme() {
      return new OrderInfoStandardScheme();
    }
  }

  private static class OrderInfoStandardScheme extends StandardScheme<OrderInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderInfo struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.orderId = iprot.readI64();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderName = iprot.readString();
              struct.setOrderNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORDER_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.orderPrice = iprot.readDouble();
              struct.setOrderPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORDER_INVENTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.orderInventory = iprot.readI64();
              struct.setOrderInventoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderInfo struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
      oprot.writeI64(struct.orderId);
      oprot.writeFieldEnd();
      if (struct.orderName != null) {
        oprot.writeFieldBegin(ORDER_NAME_FIELD_DESC);
        oprot.writeString(struct.orderName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORDER_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.orderPrice);
      oprot.writeFieldEnd();
      if (struct.source != null) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeString(struct.source);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORDER_INVENTORY_FIELD_DESC);
      oprot.writeI64(struct.orderInventory);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderInfoTupleSchemeFactory implements SchemeFactory {
    public OrderInfoTupleScheme getScheme() {
      return new OrderInfoTupleScheme();
    }
  }

  private static class OrderInfoTupleScheme extends TupleScheme<OrderInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderInfo struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetOrderName()) {
        optionals.set(1);
      }
      if (struct.isSetOrderPrice()) {
        optionals.set(2);
      }
      if (struct.isSetSource()) {
        optionals.set(3);
      }
      if (struct.isSetOrderInventory()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetOrderId()) {
        oprot.writeI64(struct.orderId);
      }
      if (struct.isSetOrderName()) {
        oprot.writeString(struct.orderName);
      }
      if (struct.isSetOrderPrice()) {
        oprot.writeDouble(struct.orderPrice);
      }
      if (struct.isSetSource()) {
        oprot.writeString(struct.source);
      }
      if (struct.isSetOrderInventory()) {
        oprot.writeI64(struct.orderInventory);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderInfo struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.orderId = iprot.readI64();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orderName = iprot.readString();
        struct.setOrderNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.orderPrice = iprot.readDouble();
        struct.setOrderPriceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.orderInventory = iprot.readI64();
        struct.setOrderInventoryIsSet(true);
      }
    }
  }

}


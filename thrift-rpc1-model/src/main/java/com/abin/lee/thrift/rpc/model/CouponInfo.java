/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.abin.lee.thrift.rpc.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-09-09")
public class CouponInfo implements org.apache.thrift.TBase<CouponInfo, CouponInfo._Fields>, java.io.Serializable, Cloneable, Comparable<CouponInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CouponInfo");

  private static final org.apache.thrift.protocol.TField COUPON_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("couponId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COUPON_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("couponName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COUPON_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("couponPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COUPON_INVENTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("couponInventory", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CouponInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CouponInfoTupleSchemeFactory());
  }

  public long couponId; // required
  public String couponName; // required
  public double couponPrice; // required
  public String source; // required
  public long couponInventory; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COUPON_ID((short)1, "couponId"),
    COUPON_NAME((short)2, "couponName"),
    COUPON_PRICE((short)3, "couponPrice"),
    SOURCE((short)4, "source"),
    COUPON_INVENTORY((short)5, "couponInventory");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COUPON_ID
          return COUPON_ID;
        case 2: // COUPON_NAME
          return COUPON_NAME;
        case 3: // COUPON_PRICE
          return COUPON_PRICE;
        case 4: // SOURCE
          return SOURCE;
        case 5: // COUPON_INVENTORY
          return COUPON_INVENTORY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COUPONID_ISSET_ID = 0;
  private static final int __COUPONPRICE_ISSET_ID = 1;
  private static final int __COUPONINVENTORY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COUPON_ID, new org.apache.thrift.meta_data.FieldMetaData("couponId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COUPON_NAME, new org.apache.thrift.meta_data.FieldMetaData("couponName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUPON_PRICE, new org.apache.thrift.meta_data.FieldMetaData("couponPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUPON_INVENTORY, new org.apache.thrift.meta_data.FieldMetaData("couponInventory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CouponInfo.class, metaDataMap);
  }

  public CouponInfo() {
  }

  public CouponInfo(
    long couponId,
    String couponName,
    double couponPrice,
    String source,
    long couponInventory)
  {
    this();
    this.couponId = couponId;
    setCouponIdIsSet(true);
    this.couponName = couponName;
    this.couponPrice = couponPrice;
    setCouponPriceIsSet(true);
    this.source = source;
    this.couponInventory = couponInventory;
    setCouponInventoryIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CouponInfo(CouponInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.couponId = other.couponId;
    if (other.isSetCouponName()) {
      this.couponName = other.couponName;
    }
    this.couponPrice = other.couponPrice;
    if (other.isSetSource()) {
      this.source = other.source;
    }
    this.couponInventory = other.couponInventory;
  }

  public CouponInfo deepCopy() {
    return new CouponInfo(this);
  }

  @Override
  public void clear() {
    setCouponIdIsSet(false);
    this.couponId = 0;
    this.couponName = null;
    setCouponPriceIsSet(false);
    this.couponPrice = 0.0;
    this.source = null;
    setCouponInventoryIsSet(false);
    this.couponInventory = 0;
  }

  public long getCouponId() {
    return this.couponId;
  }

  public CouponInfo setCouponId(long couponId) {
    this.couponId = couponId;
    setCouponIdIsSet(true);
    return this;
  }

  public void unsetCouponId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUPONID_ISSET_ID);
  }

  /** Returns true if field couponId is set (has been assigned a value) and false otherwise */
  public boolean isSetCouponId() {
    return EncodingUtils.testBit(__isset_bitfield, __COUPONID_ISSET_ID);
  }

  public void setCouponIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUPONID_ISSET_ID, value);
  }

  public String getCouponName() {
    return this.couponName;
  }

  public CouponInfo setCouponName(String couponName) {
    this.couponName = couponName;
    return this;
  }

  public void unsetCouponName() {
    this.couponName = null;
  }

  /** Returns true if field couponName is set (has been assigned a value) and false otherwise */
  public boolean isSetCouponName() {
    return this.couponName != null;
  }

  public void setCouponNameIsSet(boolean value) {
    if (!value) {
      this.couponName = null;
    }
  }

  public double getCouponPrice() {
    return this.couponPrice;
  }

  public CouponInfo setCouponPrice(double couponPrice) {
    this.couponPrice = couponPrice;
    setCouponPriceIsSet(true);
    return this;
  }

  public void unsetCouponPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUPONPRICE_ISSET_ID);
  }

  /** Returns true if field couponPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetCouponPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __COUPONPRICE_ISSET_ID);
  }

  public void setCouponPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUPONPRICE_ISSET_ID, value);
  }

  public String getSource() {
    return this.source;
  }

  public CouponInfo setSource(String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public long getCouponInventory() {
    return this.couponInventory;
  }

  public CouponInfo setCouponInventory(long couponInventory) {
    this.couponInventory = couponInventory;
    setCouponInventoryIsSet(true);
    return this;
  }

  public void unsetCouponInventory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUPONINVENTORY_ISSET_ID);
  }

  /** Returns true if field couponInventory is set (has been assigned a value) and false otherwise */
  public boolean isSetCouponInventory() {
    return EncodingUtils.testBit(__isset_bitfield, __COUPONINVENTORY_ISSET_ID);
  }

  public void setCouponInventoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUPONINVENTORY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COUPON_ID:
      if (value == null) {
        unsetCouponId();
      } else {
        setCouponId((Long)value);
      }
      break;

    case COUPON_NAME:
      if (value == null) {
        unsetCouponName();
      } else {
        setCouponName((String)value);
      }
      break;

    case COUPON_PRICE:
      if (value == null) {
        unsetCouponPrice();
      } else {
        setCouponPrice((Double)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;

    case COUPON_INVENTORY:
      if (value == null) {
        unsetCouponInventory();
      } else {
        setCouponInventory((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COUPON_ID:
      return getCouponId();

    case COUPON_NAME:
      return getCouponName();

    case COUPON_PRICE:
      return getCouponPrice();

    case SOURCE:
      return getSource();

    case COUPON_INVENTORY:
      return getCouponInventory();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COUPON_ID:
      return isSetCouponId();
    case COUPON_NAME:
      return isSetCouponName();
    case COUPON_PRICE:
      return isSetCouponPrice();
    case SOURCE:
      return isSetSource();
    case COUPON_INVENTORY:
      return isSetCouponInventory();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CouponInfo)
      return this.equals((CouponInfo)that);
    return false;
  }

  public boolean equals(CouponInfo that) {
    if (that == null)
      return false;

    boolean this_present_couponId = true;
    boolean that_present_couponId = true;
    if (this_present_couponId || that_present_couponId) {
      if (!(this_present_couponId && that_present_couponId))
        return false;
      if (this.couponId != that.couponId)
        return false;
    }

    boolean this_present_couponName = true && this.isSetCouponName();
    boolean that_present_couponName = true && that.isSetCouponName();
    if (this_present_couponName || that_present_couponName) {
      if (!(this_present_couponName && that_present_couponName))
        return false;
      if (!this.couponName.equals(that.couponName))
        return false;
    }

    boolean this_present_couponPrice = true;
    boolean that_present_couponPrice = true;
    if (this_present_couponPrice || that_present_couponPrice) {
      if (!(this_present_couponPrice && that_present_couponPrice))
        return false;
      if (this.couponPrice != that.couponPrice)
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_couponInventory = true;
    boolean that_present_couponInventory = true;
    if (this_present_couponInventory || that_present_couponInventory) {
      if (!(this_present_couponInventory && that_present_couponInventory))
        return false;
      if (this.couponInventory != that.couponInventory)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_couponId = true;
    list.add(present_couponId);
    if (present_couponId)
      list.add(couponId);

    boolean present_couponName = true && (isSetCouponName());
    list.add(present_couponName);
    if (present_couponName)
      list.add(couponName);

    boolean present_couponPrice = true;
    list.add(present_couponPrice);
    if (present_couponPrice)
      list.add(couponPrice);

    boolean present_source = true && (isSetSource());
    list.add(present_source);
    if (present_source)
      list.add(source);

    boolean present_couponInventory = true;
    list.add(present_couponInventory);
    if (present_couponInventory)
      list.add(couponInventory);

    return list.hashCode();
  }

  @Override
  public int compareTo(CouponInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCouponId()).compareTo(other.isSetCouponId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCouponId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couponId, other.couponId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCouponName()).compareTo(other.isSetCouponName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCouponName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couponName, other.couponName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCouponPrice()).compareTo(other.isSetCouponPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCouponPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couponPrice, other.couponPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCouponInventory()).compareTo(other.isSetCouponInventory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCouponInventory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couponInventory, other.couponInventory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CouponInfo(");
    boolean first = true;

    sb.append("couponId:");
    sb.append(this.couponId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("couponName:");
    if (this.couponName == null) {
      sb.append("null");
    } else {
      sb.append(this.couponName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("couponPrice:");
    sb.append(this.couponPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    if (this.source == null) {
      sb.append("null");
    } else {
      sb.append(this.source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("couponInventory:");
    sb.append(this.couponInventory);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CouponInfoStandardSchemeFactory implements SchemeFactory {
    public CouponInfoStandardScheme getScheme() {
      return new CouponInfoStandardScheme();
    }
  }

  private static class CouponInfoStandardScheme extends StandardScheme<CouponInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CouponInfo struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COUPON_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.couponId = iprot.readI64();
              struct.setCouponIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COUPON_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.couponName = iprot.readString();
              struct.setCouponNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COUPON_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.couponPrice = iprot.readDouble();
              struct.setCouponPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COUPON_INVENTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.couponInventory = iprot.readI64();
              struct.setCouponInventoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CouponInfo struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COUPON_ID_FIELD_DESC);
      oprot.writeI64(struct.couponId);
      oprot.writeFieldEnd();
      if (struct.couponName != null) {
        oprot.writeFieldBegin(COUPON_NAME_FIELD_DESC);
        oprot.writeString(struct.couponName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COUPON_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.couponPrice);
      oprot.writeFieldEnd();
      if (struct.source != null) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeString(struct.source);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COUPON_INVENTORY_FIELD_DESC);
      oprot.writeI64(struct.couponInventory);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CouponInfoTupleSchemeFactory implements SchemeFactory {
    public CouponInfoTupleScheme getScheme() {
      return new CouponInfoTupleScheme();
    }
  }

  private static class CouponInfoTupleScheme extends TupleScheme<CouponInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CouponInfo struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCouponId()) {
        optionals.set(0);
      }
      if (struct.isSetCouponName()) {
        optionals.set(1);
      }
      if (struct.isSetCouponPrice()) {
        optionals.set(2);
      }
      if (struct.isSetSource()) {
        optionals.set(3);
      }
      if (struct.isSetCouponInventory()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetCouponId()) {
        oprot.writeI64(struct.couponId);
      }
      if (struct.isSetCouponName()) {
        oprot.writeString(struct.couponName);
      }
      if (struct.isSetCouponPrice()) {
        oprot.writeDouble(struct.couponPrice);
      }
      if (struct.isSetSource()) {
        oprot.writeString(struct.source);
      }
      if (struct.isSetCouponInventory()) {
        oprot.writeI64(struct.couponInventory);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CouponInfo struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.couponId = iprot.readI64();
        struct.setCouponIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.couponName = iprot.readString();
        struct.setCouponNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.couponPrice = iprot.readDouble();
        struct.setCouponPriceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.couponInventory = iprot.readI64();
        struct.setCouponInventoryIsSet(true);
      }
    }
  }

}

